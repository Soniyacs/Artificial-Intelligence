from collections import deque

def bfs(graph, start):
    # Create a queue for BFS
    queue = deque([start])
    # Mark all the vertices as not visited
    visited = set()

    # Mark the source node as visited
    visited.add(start)

    while queue:
        # Dequeue a vertex from queue
        node = queue.popleft()
        print(node, end=" ")

        # Get all adjacent vertices of the dequeued vertex node
        # If an adjacent has not been visited, then mark it visited and enqueue it
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

# Example usage
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C', 'D'],
        'B': ['E', 'F'],
        'C': ['G'],
        'D': [],
        'E': [],
        'F': [],
        'G': []
    }
    print("BFS starting from node A:")
    bfs(graph, 'A')
