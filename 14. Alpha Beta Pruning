class GameState:
    def __init__(self, value=None, children=None):
        self.value = value  # Terminal node value for leaf nodes
        self.children = children if children is not None else []  # List of child GameState nodes

def alpha_beta_pruning(state, depth, alpha, beta, maximizing_player):
    if depth == 0 or not state.children:
        return state.value

    if maximizing_player:
        max_eval = float('-inf')
        for child in state.children:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for child in state.children:
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Example usage:
if __name__ == "__main__":
    # Creating a simple game tree
    leaf_nodes = [GameState(value=v) for v in [3, 5, 6, 9, 1, 2, 0, -1]]
    mid_nodes = [
        GameState(children=[leaf_nodes[0], leaf_nodes[1]]),
        GameState(children=[leaf_nodes[2], leaf_nodes[3]]),
        GameState(children=[leaf_nodes[4], leaf_nodes[5]]),
        GameState(children=[leaf_nodes[6], leaf_nodes[7]])
    ]
    root = GameState(children=[mid_nodes[0], mid_nodes[1], mid_nodes[2], mid_nodes[3]])

    result = alpha_beta_pruning(root, depth=3, alpha=float('-inf'), beta=float('inf'), maximizing_player=True)
    print(f"The optimal value is: {result}")
